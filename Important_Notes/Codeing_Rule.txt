
					        |==================|
				      		|		   |
						|  Rule Of Coding  |
						|		   |
						|==================|

   -------------------------   
1) Comments/Documentation  |
   -------------------------

Comments are not required, but the comments are as important as code.
						----------------------
So it is first rule that you should remember to comment/document the code properly.

Read more: How to comment the code?

What you can document?
----------------------
1-> Purpose of the code.
2-> Name of the programmer, reviewer, code writing, editing date etc.
3-> Resources (inputs) that will be used to run the code.
4-> Explain each logic, what is that for and why you used?
5-> You can also write note for the developers, in which you can explain your logic/algorithm in details.
6-> Each function declaration, definition should be documented.

Anything that you can explain, but there is no need to write unnecessary comments with the code that is already cleared.

================================================================================================================================================
2) 

Only 0 is considered as 'False'.
    ---                 ---------
Positive and negative integers are considered as 'True'.
------------------------------                  ---------
=================================================================================================================================================
   ------------------
3) Code indentation |
   ------------------

I have deal with many programmers who just write the code and they don’t care about the indentation,
since indentation is not compulsory for the compiler.
But it’s most important while writing the program. An indented code can read, edit easily.

===================================================================================================================================================
   -----------------------
4) Variable declaration  |
   -----------------------

Each variable should be declared in separate line, with sufficient spaces.
                                    --------------------------------------
While declaring variables, remember Three things.
                           -------------------- 
1-> Declare each variable in a separate line - it will help to put inline (single line comment after the variable declaration).

2-> Initialize variable with default values while declaration - 

it will help to prevent unpredictable behavior of the variable.
               ------------------------------------------------
3-> There should be one tab space between data type, variable name and initialization value.
---------           ------------------------------------------------------------------
 i.e    |
---------
int		height	=0;		//height of the object
int		weight	=0;		//width of the object 	
float		result	=0.0f;		//result of the expression 	
char		choice	='N';		//store user's choice

=================================================================================================================================================
5)

There is no need to use integer data type all time for small values.
               
There are other data types, which are used to store small integer values,and use according to the variable range.

If a variable’s value is positive in all cases, you may use ‘unsigned’ with the data type, it ensure that only positive values
will be stored.

Note: for an unsigned type of variable, make sure its value must be zero or positive, if there is any negative value, value
will be truncated. 

==================================================================================================================================================
6)

Do not declare more global variables

Global variable’s scope is life time of the program that means if there is any variable declared in global scope.
it can be used in all functions and it will live till program’s execution.
Therefore, try to declare variables inside the function blocks; they will de-allocate/destroy when program’s execution leaves the function.

==================================================================================================================================================
7)

Use constant or macro to declare a static array.
------------------------------------------------
If there are multiple declarations of arrays with the fixed values, it will hard to update/change (in future).
We can use Macro or constant to declare an array.

------
i.e  |
------

#define	MAX_CHAR	100
int main()
{
	char	first_name	[MAX_CHAR];
	char	second_name	[MAX_CHAR];
	//...
}

==================================================================================================================================================
8)

Use switch statement instead of if else to check integral values.
-----------------------------------------------------------------

If you are writing code to check integral values (like integers, characters), it is recommended 
that you should use switch statement rather than if else statements.
In switch case statement program’s execution jumps to matched case and execute the statement written in that case.
While, in if else statement, each condition (one by one) is checked till the true condition.

In such cases, switch statements may fast. How?
Let suppose, if last case (condition) required, if statement will reach there by checking all above conditions,
while switch statement will directly jump to that case and execute the statements. Therefore, second method will be faster.

==================================================================================================================================================
   -----------------------
9) Conditions breakdown  |
   -----------------------

If there are multiple conditions and you are checking them by using if else statement,
you may break down them, by using parent and child conditions.
                                 -----------------------------  
Consider the given example:

if(option == 1){
}
else if(option == 2){
}
else if(option == 3){
}
else if(option == 4){
}
else if(option == 5){
}
else if(option == 6){
}
else if(option == 7){
}

We can breakdown the conditions in multiple parts like,

if(option <= 4){
	if(option == 1){
	}
	else if(option == 2){
	}
	else if(option == 3){
	}
	else if(option == 4){
	}
}
else{ 
	else if(option == 5){
	}
	else if(option == 6){
	}
	else if(option == 7){
	}
}

In such case, conditions check will be less and program’s performance will be faster.

==================================================================================================================================================
10)

To declare an identifier name that has more than one word (multi-words variable/identifier declaration)? 
-----------------------------------------------------------

When, you are declaring an identifier like variable name, function name etc and there are two words in it.
You should separate them by using underscore (_) or mixed uppercase and lowercase alphabets(Camel Case).

For example:

if there is a variable to store product weight, variable identifier/variable name should be:
product_weight,
productWeight,
product_Weight

==================================================================================================================================================
11)

If there is only one statement in if, else, for, while and do (do while loop).
-----------------------------------------------------------------------------
i.e 

if(a>b) printf("a is greater than b\n");
else 	printf("b is greater than a\n");

==================================================================================================================================================
12)

Use Macro instead of 'Equal To' operator to reduce 'Equal To' or 'Assignment' operator confusion in C language.
------------------------------------------------------------------------------------------------------

==================================================================================================================================================
13)

which style should be used among many styles of pointer declaration/definition?
(int *ptr;) is highly recommended that means - Asterisk (*) sign should be placed close to the pointer name.
                                               -------------------------------------------------------------

==================================================================================================================================================
14)

Pre-increment is faster than post-increment because post increment keeps a copy of previous (existing) value and
-------------------------------------------
adds 1 in the existing value while pre-increment is simply adds 1 without keeping the existing value.

==================================================================================================================================================
15)

Use structure for large programs and encapsulate data and funcations there. you will see wide use of funcation Pointer here.
    -----------------									     -----------------------	




==================================================================================================================================================









